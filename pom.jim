{@import version.jim}
{@define project($packaging,$projectContent)=<project xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://maven.apache.org/POM/4.0.0"
                            xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
<modelVersion>4.0.0</modelVersion>
<packaging>$packaging</packaging>$projectContent</project>
}

{@define tag($x)={@define $x($y)=<$x>$y</$x>}}

{@define $forsep=\s*,\s*} this lets us to split the list of the tags into multiple lines

because the macro "eval" is preceded with the character # first the macro "for" is evaluated
the result (output) of the macro "for" is a series of "define" macros. Each defines a new macro
with the name of the tag. When this is ready then this output is processed by the macro "eval"
essentially executing the "define" macros and at this point the tags are defined as macros.

{#eval {@for _tag in (name,groupId,artifactId,version,scope,packaging,
                      description,url,properties,build,pluginManagement,
                      plugins,plugin,dependencyManagement,dependencies,
                      scm,connection,developerConnection,executions,
                      execution,id,goals,goal)=
{tag/_tag}}}

{@define JAMAL=com.javax0.jamal}

{@define GAV($groupId,$artifactId,$version)=
    {#if|$groupId|{groupId :$groupId}}
    {#if|$artifactId|{artifactId :$artifactId}}
    {#if|$version|{version :$version}}
}

{@define parent($id)=
<parent>
    {GAV :{GROUPID}:$id:{VERSION}}
</parent>
}

{@define dependency($groupId,$artifactId,$version,$scope)=
<dependency>
    {#if|$groupId|{groupId :$groupId}}
    {#if|$artifactId|{artifactId :$artifactId}}
    {#if|$version|{version :$version}}
    {#if|$scope|{scope :$scope}}
</dependency>
}

{@define modules($Z)=
  <modules>
    {@for MODULE in ($Z)=<module>MODULE</module>}
  </modules>
}

{@define license($name,$url)=
<licenses>
    <license>
        <name>$name</name>
        <url>$url</url>
    </license>
</licenses>
}

{@define property($name,$value)=<$name>$value</$name>}

{@define developer($name,$email)=
<developers>
    <developer>
        <name>$name</name>
        <email>$email</email>
    </developer>
</developers>
}

{@define github($developer,$project)=
    {scm|
        {connection |scm:git:git://github.com/$developer/$project.git}
        {developerConnection|scm:git:ssh://github.com/$developer/$project.git}
        {url|https:/github.com/$developer/$project/tree/master}
    }
    {url|https:/github.com/$developer/$project/tree/master}
}
{@define opens($module,$package,$to)=--add-opens gongo.$module/com.epam.vpase.gongo.$package={#if/$to/gongo.$to/ALL-UNNAMED}}
{@define exports($module,$package,$to)=--add-exports gongo.$module/com.epam.vpase.gongo.$package={#if/$to/gongo.$to/ALL-UNNAMED}}
{@define configuration($data)=<configuration>
    $data
</configuration>
}
